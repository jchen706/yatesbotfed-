{"version":3,"sources":["components/BotWebChat.js","components/ChatWindow.js","App.js","serviceWorker.js","index.js"],"names":["WebChat","styled","div","_templateObject","WebChatCP","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","token","myHeaders","Headers","process","append","fetch","method","headers","body","res","json","setState","react_default","a","createElement","id","lib_default","directLine","window","createDirectLine","styleOptions","webChatStyleOptions","Component","bubbleBackground","bubbleTextColor","bubbleBorderRadius","bubbleFromUserBackground","bubbleFromUserTextColor","bubbleFromUserBorderRadius","bubbleFromUserBorder","botAvatarImage","avatarSize","accent","ChatWindowHeader","ChatWindow_templateObject","ChatWindowTitle","h1","_templateObject2","ChatWindowBody","_templateObject3","windowOpen","ChatWindowContainer","_templateObject4","ChatWindow","_useState","useState","_useState2","slicedToArray","BotWebChat","AppContainer","App_templateObject","App_templateObject2","App","App_ChatWindowContainer","ChatWindow_ChatWindow","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"imBAQA,IAAMA,EAAUC,IAAOC,IAAVC,KAaPC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,MAHQR,+MAQXS,EAAY,IAAIC,QACRC,0DACdF,EAAUG,OAAO,gBAAiB,kEAClCH,EAAUG,OAAO,eAAgB,6BAEfC,MAChB,oEACA,CACEC,OAAQ,OACRC,QAASN,EACTO,KAAI,kLALFC,kBAckBA,EAAIC,uBAApBV,UACRL,KAAKgB,SAAS,iBAAO,CAAEX,MAAOA,yIAGvB,IAEIA,EACPL,KADFI,MAASC,MAGX,QACIA,GACAY,EAAAC,EAAAC,cAAC5B,EAAD,CAAS6B,GAAG,WACVH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,WAAYC,OAAOhC,QAAQiC,iBAAiB,CAAEnB,UAC9CoB,aAAcC,YA1CFC,aAkDlBD,EAAsB,CAE1BE,iBAAkB,WAClBC,gBAAiB,UACjBC,mBAAoB,EAEpBC,yBAA0B,UAC1BC,wBAAyB,UACzBC,2BAA4B,EAC5BC,qBAAsB,oBAEtBC,eAAgB,oBAChBC,WAAY,GACZC,OAAQ,WAGK1C,4nCClFf,IAAM2C,EAAmB9C,IAAOC,IAAV8C,KAgBhBC,EAAkBhD,IAAOiD,GAAVC,KAUfC,EAAiBnD,IAAOC,IAAVmD,IAOR,SAAAhD,GAAK,OAAKA,EAAMiD,WAAa,QAAU,OACnC,SAAAjD,GAAK,OAAKA,EAAMiD,WAAa,UAAY,UAM3C,SAAAjD,GAAK,OAAKA,EAAMiD,WAAa,OAAS,QAM9CC,EAAsBtD,IAAOC,IAAVsD,KAInBC,EAAa,WAAM,IAAAC,EACYC,oBAAS,GADrBC,EAAArD,OAAAsD,EAAA,EAAAtD,CAAAmD,EAAA,GAChBJ,EADgBM,EAAA,GAAAA,EAAA,GAGvB,OACElC,EAAAC,EAAAC,cAAC2B,EAAD,KACE7B,EAAAC,EAAAC,cAACmB,EAAD,KACErB,EAAAC,EAAAC,cAACqB,EAAD,KACGK,EACG,kCACA,6BAIR5B,EAAAC,EAAAC,cAACwB,EAAD,CAAgBE,YAAY,GAC1B5B,EAAAC,EAAAC,cAACkC,EAAD,6RC/DR,IAAMC,EAAe9D,IAAOC,IAAV8D,KAMZT,EAAsBtD,IAAOC,IAAV+D,KAkBVC,MAVf,WACE,OACExC,EAAAC,EAAAC,cAACmC,EAAD,KACErC,EAAAC,EAAAC,cAACuC,EAAD,KACEzC,EAAAC,EAAAC,cAACwC,EAAD,SCZYC,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.477deaa1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport ReactWebChat from 'botframework-webchat';\r\n\r\n// Complete list of style options found at:\r\n// https://github.com/microsoft/BotFramework-WebChat/blob/master/packages/component/src/Styles/defaultStyleOptions.js\r\n\r\nconst WebChat = styled.div`\r\n  width: 550px;\r\n  height: 400px;\r\n  position: relative;\r\n  bottom: 0%;\r\n  flex-grow: 1;\r\n\r\n  @media (max-width: 720px) {\r\n    width: 100%;\r\n    height: 90vh;\r\n  }\r\n`;\r\n\r\nclass WebChatCP extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      token: null\r\n    };\r\n  }\r\n\r\n  async componentWillMount() {\r\n    const myHeaders = new Headers();\r\n    var myToken = process.env.REACT_APP_DIRECTLINE_SECRET;\r\n    myHeaders.append('Authorization', 'Bearer ' + myToken);\r\n    myHeaders.append('Content-Type', 'application/json');\r\n\r\n    const res = await fetch(\r\n      'https://directline.botframework.com/v3/directline/tokens/generate',\r\n      {\r\n        method: 'POST',\r\n        headers: myHeaders,\r\n        body: `{    \r\n              user: {  \r\n                id: \"dl_123\", // user id must start with 'dl_'\r\n                name: \"user\"\r\n              } \r\n            }`\r\n      }\r\n    );\r\n\r\n    const { token } = await res.json();\r\n    this.setState(() => ({ token: token }));\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      state: { token }\r\n    } = this;\r\n\r\n    return (\r\n      !!token && (\r\n        <WebChat id=\"webchat\">\r\n          <ReactWebChat\r\n            directLine={window.WebChat.createDirectLine({ token })}\r\n            styleOptions={webChatStyleOptions}\r\n          />\r\n        </WebChat>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nconst webChatStyleOptions = {\r\n  // bot bubble styles\r\n  bubbleBackground: '#eaeaea;',\r\n  bubbleTextColor: '#212121',\r\n  bubbleBorderRadius: 5,\r\n  // bot bubble styles\r\n  bubbleFromUserBackground: '#66a000',\r\n  bubbleFromUserTextColor: '#ffffff',\r\n  bubbleFromUserBorderRadius: 5,\r\n  bubbleFromUserBorder: 'solid 1px #dfedcb',\r\n  // brand avatar\r\n  botAvatarImage: 'partner-yates.jpg',\r\n  avatarSize: 40,\r\n  accent: '#ffffff'\r\n};\r\n\r\nexport default WebChatCP;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport BotWebChat from './BotWebChat';\r\n\r\nconst ChatWindowHeader = styled.div`\r\n  background: #66a000;\r\n  color: #fff;\r\n  font-size: 0.8em;\r\n  border: 5px solid #66a000;\r\n  border-top-left-radius: 3px;\r\n  border-top-right-radius: 3px;\r\n  width: 550px;\r\n\r\n  @media (max-width: 720px) {\r\n    width: 100vw;\r\n    border-top-left-radius: 0px;\r\n    border-top-right-radius: 0px;\r\n  }\r\n`;\r\n\r\nconst ChatWindowTitle = styled.h1`\r\n  font-size: 1rem;\r\n  text-align: center;\r\n  margin-top: 0.3rem;\r\n  margin-bottom: 0.3rem;\r\n  transition: color 0.3s ease;\r\n  z-index: 9999999999;\r\n  color: #fff;\r\n`;\r\n\r\nconst ChatWindowBody = styled.div`\r\n  font-size: 0.8em;\r\n  background: white;\r\n  border-left: 5px solid #66a000;\r\n  border-right: 5px solid #66a000;\r\n  border-bottom: 5px solid #66a000;\r\n  width: 550px;\r\n  height: ${props => (props.windowOpen ? '400px' : '0px')};\r\n  visibility: ${props => (props.windowOpen ? 'visible' : 'hidden')};\r\n  overflow: hidden;\r\n  z-index: 9999999999;\r\n\r\n  @media (max-width: 720px) {\r\n    width: 900vw;\r\n    height: ${props => (props.windowOpen ? '90vh' : '0px')};\r\n    border-left: none;\r\n    border-right: none;\r\n  }\r\n`;\r\n\r\nconst ChatWindowContainer = styled.div`\r\n  z-index: 9999999999;\r\n`;\r\n\r\nconst ChatWindow = () => {\r\n  const [windowOpen, toggleWindow] = useState(false);\r\n\r\n  return (\r\n    <ChatWindowContainer>\r\n      <ChatWindowHeader>\r\n        <ChatWindowTitle>\r\n          {windowOpen\r\n            ? \"You're now chatting with Yates!\"\r\n            : 'Type your question below'}\r\n        </ChatWindowTitle>\r\n      </ChatWindowHeader>\r\n\r\n      <ChatWindowBody windowOpen={true}>\r\n        <BotWebChat />\r\n      </ChatWindowBody>\r\n    </ChatWindowContainer>\r\n  );\r\n};\r\n\r\nexport { ChatWindow as default };\r\n","import React from 'react';\r\nimport './App.css';\r\nimport YatesWebsiteBackground from './components/YatesWebsiteBackground';\r\nimport ChatWindow from './components/ChatWindow';\r\nimport styled from 'styled-components';\r\n\r\nconst AppContainer = styled.div`\r\n  position: relative;\r\n  width: 550px;\r\n  margin: auto;\r\n`;\r\n\r\nconst ChatWindowContainer = styled.div`\r\n  position: relative;\r\n\r\n  @media (max-width: 720px) {\r\n    left: 0px;\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <AppContainer>\r\n      <ChatWindowContainer>\r\n        <ChatWindow />\r\n      </ChatWindowContainer>\r\n    </AppContainer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}